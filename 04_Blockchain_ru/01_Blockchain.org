#+STARTUP: hidestars

#+TITLE: Блокчейн
#+AUTHOR: Андрей Иваницкий
#+DATE: 25 июня 2020

#+REVEAL_ROOT: ../ext/reveal.js-3.9.2/
#+REVEAL_THEME: moon
#+REVEAL_EXTRA_CSS: ../ext/custom-ru.css
#+REVEAL_TITLE_SLIDE: ../ext/title-slide-ru.html
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./../imgs/blockchain-title.jpg

#+OPTIONS: num:t toc:nil reveal_history:t

* Криптография
** Криптографическая хэш-функция
Функция свёртки преобразующая строку (сообщение) произвольной длины в строку установленной длины (хэш)
#+ATTR_REVEAL: :frag (appear)
 - *Детерминистическая*
 - *Быстро* вычислить хэш для сообщения
 - *Неосуществимо* подобрать сообщение, дающее заданный хэш

*** Простая реализация
    1. Берём сообщение
    2. Выбираем каждую вторую букву сообщения
    3. Если результат длиннее 5 символов повторяем шаг 2

*** Пример
     #+ATTR_REVEAL: :frag (appear)
     1. ~Bitcoin is the King~ сообщение
     2. ~_i_c_i_ _s_t_e_K_n_~ 9 символов
     3. ~___c___ ___t___K___~ 4 символа
     4. ~c tK~ хэш
 #+BEGIN_NOTES
  - Такая функция детерминистическая
  - Легко вычислить хэш
 #+END_NOTES

*** Другой пример
     #+ATTR_REVEAL: :frag (appear)
     1. ~tn  g~ хэш
     2. ~___t___n___ ___ ___g~
     3. ~_u_t_o_n_i_ _h_ _i_g~
     4. ~Buttcoin is the King~ сообщение
 #+ATTR_REVEAL: :frag (appear)
 hash(~Bitcoin is the King~) = ~c tK~\\
 hash(~Buttcoin is the King~) = ~tn  g~
 #+BEGIN_NOTES
  - Сложно придумать сообщение дающее заданный хэш
  - Маленькое изменение в сообщение даёт совершенно другой хэш
 #+END_NOTES

*** Простое применение
Алиса предъявляет хэш решения проблемы, без предъявления самого решения

*** SHA-256
*SHA-256* криптографическая хэш-функция используемая в биткоине
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC python
>>> hashlib.sha256('Bitcoin').hexdigest()
'b4056df6691f8dc72e56302ddad345d65fead3ead9299609a826e2344eb63aa4'
#+END_SRC

** Криптографический пазл
Проблема, которую сложно решить, но легко проверить решение

*** Простая аналогия — Судоку
[[../imgs/sudoku.png]]

*** Подстройка сложности
Больше строк и столбцов — сложнее решить

* Биткоин блокчейн
База данных биткоин транзакций, организованная в цепь /блоков/
#+ATTR_REVEAL: :frag (appear)
[[../imgs/blockchain-ru.png]]

* Проблема двойного расходования
Проблема в системах электронных платежей, в которой один и тот же токен может быть потрачен несколько раз

** Централизованное решение
/Центральный орган/ ведёт базу данных
 - Любой может читать
 - Центральный орган добавляет новые блоки каждые 10 минут

*** Проблемы
Центральный орган может
 - перезаписывать существующие транзакции
 - цензурировать транзакции

*** Синхронизация
Центральный орган служит /синхронизирующим/ механизмом

* Децентрализованное решение
** Позволим всем добавлять новые блоки
#+ATTR_REVEAL: :frag (appear)
Мы получим дерево, а не цепь...
#+ATTR_REVEAL: :frag (appear)
[[../imgs/block-tree-ru.png]]

** Решение
   - Сделать это вычислительно сложно (требуя /доказательство совершенной работы/)
   - Только *самая длинная*[fn:1:С наибольшей суммарной работой] цепь действительна
#+ATTR_REVEAL: :frag (appear)
[[../imgs/block-tree-longest-ru.png]]

** Подстройка сложности
#+ATTR_REVEAL: :frag (appear)
Подстройка количества требуемой /работы/ (сложность) так, чтобы среднее время поиска нового блока для всей сети составляло *10 минут*

** Мотивация
*Награда*
 - Субсидия за блок (*6.25* биткоинов на июнь 2020)
 - Комиссия за транзакции

* Заключение
Биткоин блокчейн
  - Любой может искать блок
  - Только блок с необходимой *работой* является действительным
  - Только *самая длинная* цепь является действительной
  - Подстройка *сложности* для нахождения новых блоков каждые 10 минут

* Вопросы?
